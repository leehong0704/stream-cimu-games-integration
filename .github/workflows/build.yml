name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  quality-check:
    name: Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16"

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: "8.x"

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        id: eslint
        run: pnpm run lint
        continue-on-error: true

      - name: Run Prettier
        id: prettier
        run: pnpm run format
        continue-on-error: true

      - name: Run TypeScript type check
        id: typecheck
        run: pnpm run type-check
        continue-on-error: true

      - name: Check for issues
        id: check-issues
        run: |
          if [ ${{ steps.eslint.outcome }} == 'failure' ] || \
             [ ${{ steps.prettier.outcome }} == 'failure' ] || \
             [ ${{ steps.typecheck.outcome }} == 'failure' ]; then
            echo "ISSUES_EXIST=true" >> $GITHUB_OUTPUT
            exit 1
          fi

  version-bump:
    name: Version Bump
    needs: quality-check
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.quality-check.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16"

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: "8.x"

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Get latest tag
        id: get-latest-tag
        run: |
          git fetch --tags
          echo "LATEST_TAG=$(git describe --tags --abbrev=0 || echo v0.0.0)" >> $GITHUB_OUTPUT

      - name: Determine version bump
        id: bump
        run: |
          BUMP=$(pnpm bump | tail -n1)
          echo "BUMP=$BUMP" >> $GITHUB_OUTPUT

      - name: Bump version
        id: version
        run: |
          LATEST_TAG=${{ steps.get-latest-tag.outputs.LATEST_TAG }}
          BUMP=${{ steps.bump.outputs.BUMP }}

          # Remove 'v' prefix for version calculations
          VERSION=${LATEST_TAG#v}

          # Bump version
          if [ "$BUMP" == "major" ]; then
            NEW_VERSION=$(echo $VERSION | awk -F. '{printf "%d.0.0", $1+1}')
          elif [ "$BUMP" == "minor" ]; then
            NEW_VERSION=$(echo $VERSION | awk -F. '{printf "%d.%d.0", $1, $2+1}')
          else
            NEW_VERSION=$(echo $VERSION | awk -F. '{printf "%d.%d.%d", $1, $2, $3+1}')
          fi

          # Add 'v' prefix back for tag
          NEW_TAG="v$NEW_VERSION"
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update package.json version
        run: |
          npm version ${{ steps.version.outputs.NEW_VERSION }} --no-git-tag-version
          git add package.json

      - name: Generate changelog
        run: pnpm dlx conventional-changelog-cli -p angular -i CHANGELOG.md -s

      - name: Build code
        run: pnpm run build

      - name: Commit changes
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add CHANGELOG.md
          git add dist
          git commit -m "chore(release): ${{ steps.version.outputs.NEW_TAG }}"
          git tag -a ${{ steps.version.outputs.NEW_TAG }} -m "Release ${{ steps.version.outputs.NEW_TAG }}"

      - name: Push changes
        run: |
          git push
          git push --tags

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.NEW_TAG }}
          release_name: Release ${{ steps.version.outputs.NEW_TAG }}
          body: |
            See [CHANGELOG.md](./CHANGELOG.md) for details.
          draft: false
          prerelease: false
